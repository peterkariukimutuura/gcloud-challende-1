{"version":3,"sources":["Users.js","AddUser.js","App.js","serviceWorker.js","index.js"],"names":["Users","handleUpdate","props","updateUser","indexNum","name","value","age","this","allUsers","pressEditBtn","pressDelete","usersList","map","user","index","isEditing","key","type","ref","val","required","defaultValue","onClick","className","Component","AddUser","state","handleSubmit","e","preventDefault","addUser","target","reset","updateState","setState","onSubmit","autoComplete","placeholder","onChange","App","users","newUser","i","filter","u","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d8fcd18e.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Users extends Component{\n\n    // call updateUser (App.js)\n    handleUpdate = () => {\n        this.props.updateUser(this.indexNum, this.name.value, this.age.value);\n    }\n\n    render(){\n\n        const {allUsers, pressEditBtn, pressDelete} = this.props;\n\n        const usersList = allUsers.map((user, index) => {\n\n            return user.isEditing === true ? (\n\n                <tr  key={index}>\n                    <td><input type=\"text\" ref={(val) => {this.name = val}} required defaultValue={user.name}/></td>\n                    <td><input type=\"number\" ref={(val) => {this.age = val}} required defaultValue={user.age}/></td>\n                    <td>\n                    <input type=\"button\" value=\"Update\" onClick={this.handleUpdate} ref={() => {this.indexNum = index}} className=\"btn green\"/>\n                    </td>\n                </tr>\n\n            ) : (\n\n                <tr  key={index}>\n                    <td>{user.name}</td>\n                    <td>{user.age}</td>\n                    <td><button className=\"btn white black-text\" onClick={() => pressEditBtn(index)}>Edit</button>  |  <button className=\"btn red\" onClick={()=>pressDelete(index)}>Delete</button></td>\n                </tr>\n\n            );\n        });\n\n        return(\n            <table className=\"striped\">\n                <thead>\n                    <tr>\n                    <th>Name</th>\n                    <th>Age</th>\n                    <th>Action</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {usersList}\n                </tbody>\n            </table>\n        );\n    }\n}\n\nexport default Users;\n","import React,{ Component } from 'react';\n\nclass AddUser extends Component{\n\n    state = {\n        name:null,\n        age:null,\n        isEditing:false\n    }\n    //call addUser (App.js)\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.addUser(this.state);\n        e.target.reset();\n\n    }\n    // update state\n    updateState = (e) => {\n        this.setState({\n            [e.target.name]:e.target.value,\n        });\n    }\n\n    render(){\n        return(\n            <div className=\"row\">\n                <form onSubmit={this.handleSubmit}>\n                    <div className=\"input-field col s4\">\n                        <input name=\"name\" autoComplete=\"off\" placeholder=\"Enter your name\" required type=\"text\" onChange={ this.updateState} />\n                    </div>\n                    <div className=\"input-field col s2\">\n                        <input name=\"age\" autoComplete=\"off\" type=\"number\" required placeholder=\"Enter your age\" onChange={ this.updateState } />\n                    </div>\n                    <div className=\"input-field col s2\">\n                        <input type=\"submit\" value=\"Add +\" className=\"btn blue\"/>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\nexport default AddUser;\n","import React ,{Component} from 'react';\nimport Users from './Users';\nimport AddUser from './AddUser';\n\n\nclass App extends Component {\n\n    //Default dummy data\n    state = {\n      users:[\n        {name:'Travis Jackson',age:18, isEditing:false},\n        {name:'Linda Moorhouse',age:22,isEditing:false},\n        {name:'Jeffrey Delgado',age:22,isEditing:false}\n      ]\n    }\n\n    //newUser is received from AddUser js\n    addUser = (newUser)=>{\n      let users =[...this.state.users,newUser];\n      this.setState({\n        users\n      });\n    }\n\n    ///when press edit button\n    //(i) is received from Users js\n    pressEditBtn= (i)=>{\n      let users =this.state.users;\n      users[i].isEditing = true;\n      this.setState({\n        users\n      });\n    }\n\n    //(i ,name , age ) is received from Users.js\n    updateUser =(i,name,age)=>{\n      let users = this.state.users;\n      users[i].name = name;\n      users[i].age = age;\n      users[i].isEditing = false;\n\n      this.setState({\n        users\n      });\n\n    }\n\n    pressDelete = (i) =>{\n      let users = this.state.users.filter((u,index)=>{\n        return index!==i;\n      });\n      this.setState({\n        users\n      });\n\n    }\n\n    render(){\n      return(\n        <div className=\"container\">\n          <h1>Crud with React CLI</h1>\n          <Users allUsers={this.state.users} pressEditBtn={this.pressEditBtn} updateUser={this.updateUser} pressDelete={this.pressDelete}/>\n          <AddUser addUser={this.addUser}/>\n        </div>\n      );\n    }\n\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}